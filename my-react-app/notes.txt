//Card component

Card.jsx
function Card() {
    return(
        <div className="card">
            <img className="cardImage" src="https://via.placeholder.com/150" alt="profile picture"></img>
            <h2 className="card-title">Orduhani Riza</h2>
            <p className="card-text">I am studying Computer Science</p>
        </div>
    )
}

export default Card



index.css
.card {
    border: 1px solid black;
    border-radius: 10px;
    box-shadow: 5px 5px 5px;
    padding: 20px;
    text-align: center;
    max-width: 250px;
    display: inline-block;
}

.card .cardImage{
    max-width: 60%;
    height: auto;
    border-radius: 50%;
    margin-bottom: 10px;
}

.card .card-title {
    font-family: Arial, sans-serif;
    margin: 0;
    color: hsl(0, 0%, 20%)
}

.card .card-text {
  font-family: Arial,  sans-serif;
  color: hsl(0, 0%, 30%);
}



App.jsx

import Card from './Card.jsx'
function App() {
    return (
      <Card/>
    )
}

export default App



//css in react

1 option - external

in index.css write the traditional css config

.button {
    background-color: hsl(200, 100%, 50%);
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
}


2 option - modules

create a component folder where .jsx and .css files will be located


3 option - inline

function Button() {

    const styles = {
        
            backgroundColor: "hsl(200, 100%, 50%)",
            color: "white",
            padding: "10px 20px",
            borderRadius: "4px",
            cursor: "pointer"
        
        
    }
    return(
        <button style={styles}>Click me</button>
    );
}

export default Button


//props = read-only properties that are shared between components. 
          A parent component can send data to a child component.
          <Component key=value />

usefuls when there is a need to create a few the same component but with different values pairs

app.jsx

import Student from './Student.jsx'
function App() {
    return (
      <Student name="Spongebob" age={30}  isStudent = {true}/>
    )
}

export default App



student.jsx
function Student(props) {

    return(
        <div className="student">
            <p>Name: {props.name}</p>
            <p>Age: {props.age}</p>
            <p>isStudent: {props.isStudent ? "Yes" : "No"}</p>
        </div>
    );
}

export default Student


//proptypes = a mechanism that ensures that the passed value is of the correct datatype 
              age: PropTypes.number


import PropTypes from 'prop-types'

function Student(props) {

    return(
        <div className="student">
            <p>Name: {props.name}</p>
            <p>Age: {props.age}</p>
            <p>isStudent: {props.isStudent ? "Yes" : "No"}</p>
        </div>
    );
}

Student.propTypes = {
    name: PropTypes.string,
    age: PropTypes.number,
    isStudent: PropTypes.boolean
}

export default Student



//defaultProps = default values for props in case they are not 
                 passed from the parent component



import PropTypes from 'prop-types'

function Student(props) {

    return(
        <div className="student">
            <p>Name: {props.name}</p>
            <p>Age: {props.age}</p>
            <p>isStudent: {props.isStudent ? "Yes" : "No"}</p>
        </div>
    );
}

Student.propTypes = {
    name: PropTypes.string,
    age: PropTypes.number,
    isStudent: PropTypes.boolean
}

Student.defaultProps = {
    name: "Riza",
    age: 22,
    isStudent: true
}

export default Student


//conditional rendering = allows you to control what gets rendered
                          in your application based on certain 
                          conditions 


import PropTypes from 'prop-types'

function UserGreeting(props) {
    return (
        props.isLoggedIn ? <h2>Welcome, {props.username}</h2> : <h2>Please log in to continue</h2>
    )
}

UserGreeting.proptypes = {
    isLoggedIn: PropTypes.bool,
    username: PropTypes.string,
}

UserGreeting.defaultProps = {
    username: "Guest"
}

export default UserGreeting


//render lists

function List() {
    const fruits = ["apple", "orange", "banana", "coconut", "pineapple"];

    return (fruits);
}

export default List

this list will render inappropriately (result: appleorangebananacoconutpineapple)


this one will work:

function List() {
    const fruits = ["apple", "orange", "banana", "coconut", "pineapple"];

    const listItems = fruits.map(fruit => <li>{fruit}</li>);

    return (<ol>{listItems}</ol>);
}

export default List



//render arrays of objects

Example 1
function List() {
    const fruits = [{id: 1, name: "apple", calories: 95}, 
                    {id: 2, name: "orange", calories: 45}, 
                    {id: 3, name: "banana", calories: 105}, 
                    {id: 4, name:"coconut", calories: 159}, 
                    {id: 5, name:"pineapple", calories: 37}];

    fruits.sort((a, b) => a.name.localeCompare(b.name))  //Alphabetical 

    const listItems = fruits.map(fruit => <li key={fruit.id}>
                                             {fruit.name}: &nbsp;
                                             <b>{fruit.calories}</b></li>);

    return (<ol>{listItems}</ol>);
}

export default List


Example 2
function List() {
    const fruits = [{id: 1, name: "apple", calories: 95}, 
                    {id: 2, name: "orange", calories: 45}, 
                    {id: 3, name: "banana", calories: 105}, 
                    {id: 4, name:"coconut", calories: 159}, 
                    {id: 5, name:"pineapple", calories: 37}];

    fruits.sort((a, b) => a.name.localeCompare(b.name))  //Alphabetical 

    const listItems = fruits.map(fruit => <li key={fruit.id}>
                                             {fruit.name}: &nbsp;
                                             <b>{fruit.calories}</b></li>);

    return (<ol>{listItems}</ol>);
}

export default List

Example 3

function List() {
    const fruits = [{id: 1, name: "apple", calories: 95}, 
                    {id: 2, name: "orange", calories: 45}, 
                    {id: 3, name: "banana", calories: 105}, 
                    {id: 4, name:"coconut", calories: 159}, 
                    {id: 5, name:"pineapple", calories: 37}];

    const LowCalFruits = fruits.filter(fruit => fruit.calories > 100)

    const listItems = LowCalFruits.map(fruit => <li key={fruit.id}>
                                             {fruit.name}: &nbsp;
                                             <b>{fruit.calories}</b></li>);

    return (<ol>{listItems}</ol>);
}

export default List

Example 4
To make component reusable:


import List from './List.jsx'

function App() {

    const fruits = [{id: 1, name: "apple", calories: 95}, 
                    {id: 2, name: "orange", calories: 45}, 
                    {id: 3, name: "banana", calories: 105}, 
                    {id: 4, name:"coconut", calories: 159}, 
                    {id: 5, name:"pineapple", calories: 37}];

    const vegetables = [{id: 1, name: "celery", calories: 43}, 
                    {id: 2, name: "carrot", calories: 67}, 
                    {id: 3, name: "cucumber", calories: 105}, 
                    {id: 4, name:"potato", calories: 52}, 
                    {id: 5, name:"tomato", calories: 12}];
    return (
      <>
      <List items={fruits} category="Fruits"/>
      <List items={vegetables} category="Vegetables"/>
      </>
    )
}

export default App


Example 5
If arrays is empty return null:


import List from './List.jsx'

function App() {

    const fruits = [{id: 1, name: "apple", calories: 95}, 
                    {id: 2, name: "orange", calories: 45}, 
                    {id: 3, name: "banana", calories: 105}, 
                    {id: 4, name:"coconut", calories: 159}, 
                    {id: 5, name:"pineapple", calories: 37}];

    const vegetables = [{id: 1, name: "celery", calories: 43}, 
                    {id: 2, name: "carrot", calories: 67}, 
                    {id: 3, name: "cucumber", calories: 105}, 
                    {id: 4, name:"potato", calories: 52}, 
                    {id: 5, name:"tomato", calories: 12}];
    return (
      <>
      {fruits.length > 0 ? <List items={fruits} category="Fruits"/> : null}
      {vegetables.length > 0 ? <List items={vegetables} category="Vegetables"/> : null}
      </>
    )
}

export default App


//click events

function Button() {

    const handleClick = (e) => e.target.textContent = "OUCH!"
    return <button onClick={(e) => handleClick(e)}>Click me</button>
}

export default Button


onDoubleClick used instead of onClick if two clicks required


//useState() hook

Example 1

import React, {useState} from 'react'

function MyComponent() {
    const [name, setName] = useState() #it is possible to write a default state in the brackets

    const handleSetName = () => {
        setName("Riza")
    }


    return (
        <div>
            {name} is a student <br></br>
            <br></br><button onClick={handleSetName}>Set Name</button>
        </div>
    )
}

export default MyComponent

Example 2

import React, {useState} from 'react'

function MyComponent() {
    const [name, setName] = useState("Guest")
    const [age, incrementAge] = useState(22)

    const handleSetName = () => {
        setName("Riza")
    }

    const HandleSetAge = () => {
        incrementAge(age + 1)
    }


    return (
        <div>
            {name} is a student and he is {age} years old<br></br>
            <br></br><button onClick={handleSetName}>Set Name</button>
            <br></br><button onClick={HandleSetAge}>Set Age</button>
        </div>
    )
}

export default MyComponent

Example 3

import React, {useState} from 'react'

function MyComponent() {
    const [name, setName] = useState("Guest")
    const [age, incrementAge] = useState(22)
    const [isEmployed, setisEmployed] = useState(false)

    const handleSetName = () => {
        setName("Riza")
    }

    const HandleSetAge = () => {
        incrementAge(age + 1)
    }

    const HandlesetisImplyed = () => {
        setisEmployed(!isEmployed)
    }


    return (
        <div>
            {name} is a studen. He is {age} years old and he is {isEmployed ? "is employed" : "is not employed"}<br></br>
            <br></br><button onClick={handleSetName}>Set Name</button>
            <br></br><button onClick={HandleSetAge}>Set Age</button>
            <br></br><button onClick={HandlesetisImplyed}>Set isEmployed</button>
        </div>
    )
}

export default MyComponent


//Counter program using useState() hook

import React, {useState} from 'react'

function Counter() {
    const [count, setCount] = useState(0)

    const IncreaseCount = () => {
        setCount(count + 1)
    }
 
    const DecreaseCount = () => {
        setCount(count-1)
    }

    const Reset = () => {
        setCount(0)
    }
    
    return (
        <div>
            Count: {count}<br></br> <br></br>
            <button onClick={IncreaseCount}>Increase</button><br></br> <br></br>
            <button onClick={DecreaseCount}>Decrease</button>
            <button onClick={Reset}>Reset</button>
        </div>
    )
}

export default Counter


//OnChange - event handler used primarily with from elements
             ex. <input>, <select>, <textArea>, <radio>
             Triggers a function every time the value of the input changes



//basically when any change happens in the form, browser creates an event which then is passed 
  to handler function which sets the value to the stateful variable


import React, {useState} from 'react'

function MyComponent() {

    const [name, setName] = useState("")
    const [quantity, setQuantity] = useState(1)
    const [comment, setComment] = useState()
    const [payment, setPayment] = useState()

    function handleNameChange(event) {
        setName(event.target.value);
    }

    function handleQuantityChange(event) {
        setQuantity(event.target.value)
    }

    function handleCommentChange(event) {
        setComment(event.target.value)
    }

    function handlePaymentChange(event) {
        setPayment(event.target.value)
    }
    
    return (<div>
                <input value={name} onChange={handleNameChange}></input>
                <p>Name: {name}</p>
                <input value={quantity} onChange={handleQuantityChange} type='number'></input>
                <p>Quantity: {quantity}</p>
                <textarea value={comment} onChange={handleCommentChange}></textarea>
                <p>Text Area: {comment}</p>
                <select value={payment} onChange={handlePaymentChange}>
                    <option value=''>Select an option</option>
                    <option value='Visa'>Visa</option>
                    <option value='Mastercard'>Mastercard</option>
                    <option value='GiftCard'>Gi ftCard</option>
                </select>
                <p>Payment: {payment}</p>
            </div>)
}

export default MyComponent


//Color Picker program

import React, {useState} from "react"

function ColorPickerApp() {

    const [color, stateColor] = useState("");

    function handleColorChange(event) {
        stateColor(event.target.value);
    }

    return (<div className="colorPickerContainer">

            <h1>Color Picker</h1>
            <div className="colorDisplay" style={{backgroundColor: color}}>
                <p>Selected color: {color}</p>
            </div>
            <label>Select a color:</label>
            <input type="color" value={color} onChange={handleColorChange}></input>
            </div>)
}

export default ColorPickerApp


//updater function = a function passed as an argument to setState() usually
                     ex. setYear(updater function)
                     Allow for safe updates based on the previous states
                     Used with multiple state updates and asynchronous functions
                     Good practice to use updater functions

the same as setCount(count+2) but it is better practice to use updater function


import React, {useState} from 'react'

function Counter() {
    const [count, setCount] = useState(0)

    const IncreaseCount = () => {
        setCount(prevCount => prevCount + 1)
        setCount(prevCount => prevCount + 1)        
    }
 
    const DecreaseCount = () => {
        setCount(prevCount => prevCount - 1)
        setCount(prevCount => prevCount - 1)
    }

    const Reset = () => {
        setCount(prevCount => prevCount = 0)
    }
    
    return (
        <div>
            Count: {count}<br></br> <br></br>
            <button onClick={IncreaseCount}>Increase</button><br></br> <br></br>
            <button onClick={DecreaseCount}>Decrease</button>
            <button onClick={Reset}>Reset</button>
        </div>
    )
}

export default Counter


//updating objects 

import React, {useState} from 'react'

function Counter() {
    
    const [car, setCar] = useState({year: 2024, make: `Ford`, model: `Mustang`});

    function handleYearChange(event) {
        setCar(c => ({...car, year: event.target.value}))
    }

    function handleMakeChange(event) {
        setCar(c => ({...car, make: event.target.value}))
    }

    function handleModelChange(event) {
        setCar(c => ({...car, model: event.target.value}))
    }
 
    return(<div>
        <p>Your favorite car is: {car.year} {car.make} {car.model}</p>

        <input type="number" value={car.year} onChange={handleYearChange}></input><br></br>
        <input type="text" value={car.make} onChange={handleMakeChange}></input><br></br>
        <input type="text" value={car.model} onChange={handleModelChange}></input><br></br>
    </div>)
}

export default Counter


//update arrays
import React, {useState} from 'react'

function Counter() {
    
   const [fruits, setFruits] = useState(["mango", "apple", "orange", "pear", "banana"])

   function handleAddFruit() {

        const newFruit = document.getElementById("fruitInput").value
        setFruits([...fruits, newFruit])
   }

   function handleRemoveFruit() {
        setFruits(foods.filter((_, i) => i !== index));
        
   }

   return (
    <div>
        <h1>Fruits</h1>
        <ul>
            {fruits.map((fruit, index) => <li key={index} onClick={() => handleRemoveFruit(index)}>{fruit}</li>)}
        </ul>
        <input type="text" id="fruitInput" placeholder="Enter a fruit"></input><br></br><br></br>
        <button onClick={handleAddFruit}>Add fruit</button><br></br><br></br>
    </div>
   )
}

export default Counter


//update array of objects

import React, {useState} from 'react'

function MyComponent2() {
    const [homes, setHomes] = useState([])
    const [homeSquare, setSquare] = useState(0)
    const [homePrice, setPrice] = useState(``)
    const [homeAddress, setAdress] = useState(``)

    function handleHomeAdd() {
        const newHome = {
            square: homeSquare,
            price: homePrice,
            address: homeAddress
        }

        setHomes(h => [...h, newHome])
            
    }

    function handleSquareChange(event) {
        setSquare(event.target.value)
    }

    function handlePriceChange(event) {
        setPrice(event.target.value)
    }

    function handleAddressChange(event) {
        setAdress(event.target.value)
    }

    function handleRemoveHome(index) {
        setHomes(h => h.filter((_, i) => i !== index))
    }

    return (
        <div>
            <h2>List of homes</h2>
            <ul>
                {homes.map((homes, index) => 
                <li key={index} onClick={() => handleRemoveHome(index)}>
                    {homes.square} {homes.price} {homes.address}
                </li>)}
            </ul>
            <input type="number" value={homeSquare} onChange={handleSquareChange} placeholder='Add square meteres'></input><br></br>
            <input type="number" value={homePrice} onChange={handlePriceChange} placeholder='Add price'></input><br></br>
            <input type="text" value={homeAddress} onChange={handleAddressChange} placeholder='Add address'></input><br></br>
            <button onClick={handleHomeAdd}>Add Home</button>
        </div>
    )
}

export default MyComponent2


